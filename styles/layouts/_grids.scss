/*
 * MOBILE (<768px) ====================================
 * fixture(별명) --------- sm
 * # of colums ----------- 4
 * margin ---------------- 5px
 * gutter ---------------- 20px
 * container-size -------- 100% - (5px * 2)
 * (container: 그리드 시스템이 적용되는 상자들. 그림으로 치자면 색깔 있는 영역.)
*/

/*
 * TABLET (>=768px) ====================================
 * fixture --------- md
 * # of colums ----------- 12
 * margin ---------------- 30px
 * gutter ---------------- 20px
 * container-size -------- 100% - (30px * 2)
 * max-container-size ---- 960px
*/

/*
 * DESKTOP (>=1200px) ====================================
 * fixture --------- lg
 * # of colums ----------- 12
 * unit ------------------ 75px
 * gutter ---------------- 20px
 * margin ---------------- auto
 * container-size -------- 1140px
 * max-container-size ---- 1140px
 * 유닛이 고정된 길이로 정해지면 margin은 딱히 의미 없다.
*/

$gutter: 20px;

$sm-columns: 4;
$sm-margin: 5px;

$md-columns: 12;
$md-margin: 30px;
$md-max-container: 960px + $md-margin * 2; // box-sizing: border-box 때문에 이런 작업이 필요.

$lg-columns: 12;
$lg-unit: 75px;
$lg-max-container: ($lg-unit + $gutter) * $lg-columns; // 재사용성 높이기 위해

.container {
  width: 100%;
  padding: 0 $sm-margin;
  margin: 0 auto; // 나중에 화면 크기 커지면 container의 사이즈는 특정 값으로 고정이 되고, 중간으로 배치되어야 하므로.. 그것에 대한 대비.

  .row {
    display: flex;
    flex-wrap: wrap; // unit 사이즈를 그대로 유지하기 위해.
  }

  [class^="col-"] {
    padding: 0 $gutter / 2;
  } // 클래스가 col-로 시작하는 모든 요소 선택

  @for $i from 1 through $sm-columns {
    .col-sm-#{$i} {
      width: percentage($i / $sm-columns);
    }
  }

  @include responsive(T) {
    max-width: $md-max-container;
    padding: 0 $md-margin;

    @for $i from 1 through $md-columns {
      .col-md-#{$i} {
        width: percentage($i / $md-columns);
      }
    }
  }

  @include responsive(D) {
    max-width: $lg-max-container;
    padding: 0;

    @for $i from 1 through $lg-columns {
      .col-lg-#{$i} {
        width: ($lg-unit + $gutter) * $i;
      }
    }
  }
}
